{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/arifz/Downloads/edutech_ai/frontend/app/api/chat/route.ts"],"sourcesContent":["// import { openai } from \"@ai-sdk/openai\";\r\n// import { streamText, UIMessage, convertToModelMessages } from \"ai\";\r\n\r\n// export async function POST(req: Request) {\r\n//   const { messages }: { messages: UIMessage[] } = await req.json();\r\n//   const result = streamText({\r\n//     model: openai(\"gpt-4o\"),\r\n//     messages: convertToModelMessages(messages),\r\n//   });\r\n\r\n//   return result.toUIMessageStreamResponse();\r\n// }\r\n\r\n//url to call api\r\n// /api/orchestrator\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { messages } = await req.json();\r\n\r\n    // Extract user message from the messages array\r\n    const lastMessage = messages[messages.length - 1];\r\n    console.log(\"In last message\", lastMessage);\r\n    \r\n    let userMessage = \"\";\r\n    if (lastMessage && \"parts\" in lastMessage && Array.isArray(lastMessage.parts)) {\r\n      const textPart = lastMessage.parts.find((part: any) => part.type === \"text\");\r\n      userMessage = textPart?.text || \"\";\r\n    } else if (lastMessage && \"content\" in lastMessage) {\r\n      userMessage = (lastMessage as any).content || \"\";\r\n    }\r\n\r\n    console.log(\"User message\", userMessage);\r\n\r\n    // Call FastAPI backend to get the response\r\n    const apiUrl = 'https://ywcdy4t13i.execute-api.us-east-1.amazonaws.com/dev/qna';\r\n    const backendResponse = await fetch(`${apiUrl}`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ prompt: userMessage }),\r\n    });\r\n\r\n    console.log(\"Backend response\", backendResponse);\r\n\r\n    if (!backendResponse.ok) {\r\n      const errorText = await backendResponse.text();\r\n      console.error(\"Backend error details:\", backendResponse.status, errorText);\r\n      throw new Error(`Backend error: ${backendResponse.status} - ${errorText}`);\r\n    }\r\n\r\n    const backendData = await backendResponse.json();\r\n    console.log(\"Backend data:\", backendData);\r\n\r\n    // Parse the body if it's a string\r\n    let responseContent = \"No response received\";\r\n    if (backendData.body) {\r\n      try {\r\n        const parsedBody = JSON.parse(backendData.body);\r\n        responseContent = parsedBody.response || parsedBody.output || parsedBody.answer;\r\n      } catch (parseError) {\r\n        console.error(\"Error parsing backend body:\", parseError);\r\n        responseContent = backendData.body; // Use raw body if parsing fails\r\n      }\r\n    } else if (backendData.output || backendData.response || backendData.answer) {\r\n      responseContent = backendData.output || backendData.response || backendData.answer;\r\n    }\r\n\r\n    // Return simple JSON response\r\n    return new Response(\r\n      JSON.stringify({\r\n        id: Date.now().toString(),\r\n        role: \"assistant\",\r\n        content: responseContent,\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n      }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"API error:\", error);\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        id: Date.now().toString(),\r\n        role: \"assistant\", \r\n        content: \"Sorry, I encountered an error while processing your request. Please try again.\",\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,sEAAsE;AAEtE,6CAA6C;AAC7C,sEAAsE;AACtE,gCAAgC;AAChC,+BAA+B;AAC/B,kDAAkD;AAClD,QAAQ;AAER,+CAA+C;AAC/C,IAAI;AAEJ,iBAAiB;AACjB,oBAAoB;;;;;AAEb,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,+CAA+C;QAC/C,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QACjD,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,IAAI,cAAc;QAClB,IAAI,eAAe,WAAW,eAAe,MAAM,OAAO,CAAC,YAAY,KAAK,GAAG;YAC7E,MAAM,WAAW,YAAY,KAAK,CAAC,IAAI,CAAC,CAAC,OAAc,KAAK,IAAI,KAAK;YACrE,cAAc,UAAU,QAAQ;QAClC,OAAO,IAAI,eAAe,aAAa,aAAa;YAClD,cAAc,AAAC,YAAoB,OAAO,IAAI;QAChD;QAEA,QAAQ,GAAG,CAAC,gBAAgB;QAE5B,2CAA2C;QAC3C,MAAM,SAAS;QACf,MAAM,kBAAkB,MAAM,MAAM,GAAG,QAAQ,EAAE;YAC/C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,QAAQ;YAAY;QAC7C;QAEA,QAAQ,GAAG,CAAC,oBAAoB;QAEhC,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACvB,MAAM,YAAY,MAAM,gBAAgB,IAAI;YAC5C,QAAQ,KAAK,CAAC,0BAA0B,gBAAgB,MAAM,EAAE;YAChE,MAAM,IAAI,MAAM,CAAC,eAAe,EAAE,gBAAgB,MAAM,CAAC,GAAG,EAAE,WAAW;QAC3E;QAEA,MAAM,cAAc,MAAM,gBAAgB,IAAI;QAC9C,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,kCAAkC;QAClC,IAAI,kBAAkB;QACtB,IAAI,YAAY,IAAI,EAAE;YACpB,IAAI;gBACF,MAAM,aAAa,KAAK,KAAK,CAAC,YAAY,IAAI;gBAC9C,kBAAkB,WAAW,QAAQ,IAAI,WAAW,MAAM,IAAI,WAAW,MAAM;YACjF,EAAE,OAAO,YAAY;gBACnB,QAAQ,KAAK,CAAC,+BAA+B;gBAC7C,kBAAkB,YAAY,IAAI,EAAE,gCAAgC;YACtE;QACF,OAAO,IAAI,YAAY,MAAM,IAAI,YAAY,QAAQ,IAAI,YAAY,MAAM,EAAE;YAC3E,kBAAkB,YAAY,MAAM,IAAI,YAAY,QAAQ,IAAI,YAAY,MAAM;QACpF;QAEA,8BAA8B;QAC9B,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB,MAAM;YACN,SAAS;QACX,IACA;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAE5B,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB,MAAM;YACN,SAAS;QACX,IACA;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF","debugId":null}}]
}